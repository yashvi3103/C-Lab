27.What is "break"?

"Break" is a keyword in programming that allows you to immediately exit a loop, interrupting its execution. It's like a stop button for the loop.

Why Use "break"?

You use "break" when you want to prematurely end a loop before it completes all its iterations. It's handy for stopping a loop when a certain condition is met.

Example in Easy Terms:

Suppose you want to find the first even number in a list of integers:


#include <stdio.h>

int main() {
    int numbers[] = {1, 3, 4, 7, 10, 15};
    int length = sizeof(numbers) / sizeof(numbers[0]);
    int firstEven = -1; // Initialize to a value that indicates no even number found

    for (int i = 0; i < length; i++) {
        if (numbers[i] % 2 == 0) {
            firstEven = numbers[i];
            break; // Exit the loop as soon as the first even number is found
        }
    }

    if (firstEven != -1) {
        printf("The first even number is: %d\n", firstEven);
    } else {
        printf("No even number found.\n");
    }

    return 0;
}
In this example, the "break" statement is used to exit the loop as soon as the first even number is found.

What is "continue"?

"Continue" is a keyword in programming that allows you to skip the rest of the current iteration of a loop and move on to the next iteration. It's like a "skip" button for the current loop cycle.

Why Use "continue"?

You use "continue" when you want to skip certain iterations of a loop based on a condition, while allowing the loop to continue executing.

Example in Easy Terms:

Suppose you want to print only the odd numbers in a list of integers:


#include <stdio.h>

int main() {
    int numbers[] = {2, 5, 8, 11, 14, 17};
    int length = sizeof(numbers) / sizeof(numbers[0]);

    for (int i = 0; i < length; i++) {
        if (numbers[i] % 2 == 0) {
            continue; // Skip even numbers, move to the next iteration
        }
        printf("%d is an odd number.\n", numbers[i]);
    }

    return 0;
}
In this example, the "continue" statement is used to skip the print statement for even numbers and move on to the next iteration.

Why "break" and "continue" are Important:

"Break" and "continue" statements offer fine-grained control over loop behavior. "Break" allows you to exit a loop prematurely, while "continue" lets you skip specific iterations.